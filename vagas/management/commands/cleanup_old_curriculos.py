from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from vagas.models import Curriculo

class Command(BaseCommand):
    help = 'Remove curr√≠culos antigos baseado em crit√©rios configur√°veis'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=90,
            help='Remove curr√≠culos mais antigos que X dias (padr√£o: 90)',
        )
        parser.add_argument(
            '--status',
            choices=['aprovado', 'reprovado', 'analise_manual'],
            help='Remove apenas curr√≠culos com status espec√≠fico',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Mostra quais curr√≠culos seriam removidos sem realmente remov√™-los',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a remo√ß√£o sem confirma√ß√£o',
        )

    def handle(self, *args, **options):
        days = options['days']
        status = options['status']
        dry_run = options['dry_run']
        force = options['force']
        
        # Calcula a data limite
        cutoff_date = timezone.now() - timedelta(days=days)
        
        # Constr√≥i a query
        queryset = Curriculo.objects.filter(data_envio__lt=cutoff_date)
        
        if status:
            if status == 'aprovado':
                queryset = queryset.filter(aprovado=True)
            elif status == 'reprovado':
                queryset = queryset.filter(aprovado=False)
            elif status == 'analise_manual':
                # Para an√°lise manual, precisamos verificar o campo analise_ia
                queryset = queryset.filter(analise_ia__classificacao='analise manual')
        
        # Conta os curr√≠culos que seriam removidos
        count = queryset.count()
        
        if count == 0:
            self.stdout.write(
                self.style.SUCCESS(f"üéâ Nenhum curr√≠culo encontrado para remo√ß√£o!")
            )
            self.stdout.write(f"   Crit√©rios: {days} dias, status: {status or 'todos'}")
            return
        
        # Mostra estat√≠sticas
        self.stdout.write(f"üìä Estat√≠sticas de limpeza:")
        self.stdout.write(f"   Data limite: {cutoff_date.strftime('%d/%m/%Y %H:%M')}")
        self.stdout.write(f"   Crit√©rios: {days} dias, status: {status or 'todos'}")
        self.stdout.write(f"   Curr√≠culos encontrados: {count}")
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING(f"\nüîç MODO DRY-RUN - Nenhum curr√≠culo ser√° removido")
            )
            self.stdout.write("Curr√≠culos que seriam removidos:")
            
            for curriculo in queryset[:10]:  # Mostra apenas os primeiros 10
                self.stdout.write(f"   - {curriculo.nome} ({curriculo.email}) - {curriculo.data_envio.strftime('%d/%m/%Y')}")
            
            if count > 10:
                self.stdout.write(f"   ... e mais {count - 10} curr√≠culos")
            return
        
        # Confirma√ß√£o para remo√ß√£o
        if not force:
            self.stdout.write(f"\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover {count} curr√≠culos permanentemente!")
            self.stdout.write("Isso inclui:")
            self.stdout.write("   - Registro no banco de dados")
            self.stdout.write("   - Arquivo f√≠sico do curr√≠culo")
            self.stdout.write("   - An√°lise da IA")
            
            confirm = input(f"\nDeseja continuar? (y/N): ")
            if confirm.lower() != 'y':
                self.stdout.write("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
                return
        
        # Remove os curr√≠culos
        removed_count = 0
        
        for curriculo in queryset:
            try:
                nome = curriculo.nome
                email = curriculo.email
                data_envio = curriculo.data_envio
                
                curriculo.delete()  # Isso ir√° disparar os signals automaticamente
                removed_count += 1
                
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ Removido: {nome} ({email}) - {data_envio.strftime('%d/%m/%Y')}")
                )
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå Erro ao remover curr√≠culo {curriculo.id}: {e}")
                )
        
        # Resumo final
        self.stdout.write(f"\nüéØ Resumo da opera√ß√£o:")
        self.stdout.write(f"   Curr√≠culos removidos: {removed_count}/{count}")
        
        if removed_count == count:
            self.stdout.write(
                self.style.SUCCESS("üéâ Limpeza conclu√≠da com sucesso!")
            )
        else:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  Alguns curr√≠culos n√£o puderam ser removidos")
            ) 